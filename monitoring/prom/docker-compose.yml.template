version: '${COMPOSE_FILE_VERSION}'

networks:
  monitoring_net:
    external: true
    name: ${APP_NETWORK_NAME}

volumes:
  prometheus_data: {}
  grafana_data: {}
  alertmanager_data: {}

configs:
  caddy_config:
    file: ./caddy/Caddyfile
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  prometheus_config_${PROMETHEUS_CONFIG_VERSION}:
    file: ./prometheus/configs/prometheus.yml
  prometheus_target:
    file: ./prometheus/configs/targets.json
  prometheus_node_rules:
    file: ./prometheus/rules/node.rules.yml
  prometheus_task_rules:
    file: ./prometheus/rules/task.rules.yml
  prometheus_general__rules:
    file: ./prometheus/rules/general.rules.yml
  prometheus_app_rules:
    file: ./prometheus/rules/app.rules.yml
  alertmanager_config:
    file: ./alertmanager/configs/alertmanager.yml
  alertmanager_wechat_template:
    file: ./alertmanager/configs/wechat.tmpl

services:
  dockerd-exporter:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${CADDY_IMAGE_NAME}:${CADDY_IMAGE_TAG}
    networks:
      - monitoring_net
    environment:
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  cadvisor:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${CADVISOR_IMAGE_NAME}:${CADVISOR_IMAGE_TAG}
    networks:
      - monitoring_net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  grafana:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${GRAFANA_IMAGE_NAME}:${GRAFANA_IMAGE_TAG}
    networks:
      - monitoring_net
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      #- GF_SERVER_ROOT_URL=\${GF_SERVER_ROOT_URL:-localhost}
      #- GF_SMTP_ENABLED=\${GF_SMTP_ENABLED:-false}
      #- GF_SMTP_FROM_ADDRESS=\${GF_SMTP_FROM_ADDRESS:-grafana@test.com}
      #- GF_SMTP_FROM_NAME=\${GF_SMTP_FROM_NAME:-Grafana}
      #- GF_SMTP_HOST=\${GF_SMTP_HOST:-smtp:25}
      #- GF_SMTP_USER=\${GF_SMTP_USER}
      #- GF_SMTP_PASSWORD=\${GF_SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == yes
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  alertmanager:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${ALERTMANAGER_IMAGE_NAME}:${ALERTMANAGER_IMAGE_TAG}
    networks:
      - monitoring_net
    environment:
      - SLACK_URL=\${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=\${SLACK_CHANNEL:-general}
      - SLACK_USER=\${SLACK_USER:-alertmanager}
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
      - source: alertmanager_wechat_template
        target: /etc/alertmanager/wechat.tmpl
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager_data:/alertmanager
      - /etc/localtime:/etc/localtime:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == yes
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  node-exporter:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${NODE_EXPORTER_IMAGE_NAME}:${NODE_EXPORTER_IMAGE_TAG}
    networks:
      - monitoring_net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  prometheus:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${PROMETHEUS_IMAGE_NAME}:${PROMETHEUS_IMAGE_TAG}
    networks:
      - monitoring_net
    configs:
      - source: prometheus_config_${PROMETHEUS_CONFIG_VERSION}
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_target
        target: /etc/prometheus/targets.json
      - source: prometheus_node_rules
        target: /etc/prometheus/rules/node.rules.yml
      - source: prometheus_task_rules
        target: /etc/prometheus/rules/task.rules.yml
      - source: prometheus_general__rules
        target: /etc/prometheus/rules/general.rules.yml
#      - source: prometheus_app_rules
#        target: /etc/prometheus/rules/app.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
    volumes:
      - prometheus_data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == yes
      resources:
        limits:
          memory: 2048M
          cpus: '2'
        reservations:
          memory: 1024M
          cpus: '1'

  caddy:
    image: ${DOCKER_REGISTRY}/${PROJECT_NAME}/${CADDY_IMAGE_NAME}:${CADDY_IMAGE_TAG}
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9094:9094"
    networks:
      - monitoring_net
    environment:
      - ADMIN_USER=${CADDY_ADMIN_USER}
      - ADMIN_PASSWORD=${CADDY_ADMIN_PASSWORD}
    configs:
      - source: caddy_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == yes
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 128M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 5
